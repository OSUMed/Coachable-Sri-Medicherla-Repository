class Solution:
    def dfs(self, x, y, grid):
        # clear out invalid nodes- out of bound cases and cases where it is not 1(_ , 0)
        if x not in range(len(grid)) or y not in range(len(grid[0])) or grid[x][y] == "0" or grid[x][y] == "_":
            return

        # process the valid node: 1 -> _
        grid[x][y] = "_"

        # call dfs on neighbors
        directions = [(0,1), (1,0), (-1,0), (0,-1)]
        for i, j in directions:
            newx = x + i
            newy = y + j
            self.dfs(newx, newy, grid)
        return

    def numIslands(self, grid: List[List[str]]) -> int:
        numIslands = 0
        for i in range(len(grid)):
            for j in range(len(grid[0])):

                # Call DFS on "new" group of 1s because new island
                if grid[i][j] == "1":
                    self.dfs(i, j, grid)
                    numIslands += 1
        
        return numIslands
